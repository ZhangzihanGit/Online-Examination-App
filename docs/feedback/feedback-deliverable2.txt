The domain model is well-designed and the diagram has all the relevant information. The class diagram is somewhat complete, but there are a few elements missing, for example, shouldnâ€™t the UoW have a dependency on the mappers? Also, there are no classes from the presentation layer illustrated. The description of the foreign key mapping pattern corresponds to the association table mapping pattern. Also, in your implementation of the pattern, a question should have a reference to an object of type Exam, not the exam id, the ids (or FKs) are only meant to be used in the DB. The embedded value pattern may have been misunderstood. An exam can have multiple submissions, one for every student enrolled in the subject. How can this be represented in a single table (Exam) in the DB? Some of the patterns could only be properly explained if the DB model was shown (e.g., foreign key, association table, embedded value and inheritance pattern), this is missing in your descriptions. The Unit of Work pattern should not be implemented as a Singleton. If you do this, then you end up with a unit of work that is keeping track of operations done by different transactions by different users, and when one of these transactions commits, partial changes made by other transactions may be committed to the DB. This is just one of the potential issues that may arise, you must also consider that the singleton is being used in a multi-threaded environment. If you are going to rely on UoW to manage concurrency, then you must change your current implementation and scope the UoW per business transaction. It seems like marks in table view do not update, we can enter the mark but changes do not persist. Otherwise the functionality seems to be working well, good job.